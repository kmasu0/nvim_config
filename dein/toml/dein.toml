[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
hook_add = '''
  set hidden
  set nobackup
  set nowritebackup
  set cmdheight=2
  set updatetime=200
  set shortmess+=c

  if has("nvim-0.5.0") || has("patch-8.1.1564")
    " Recently vim can merge signcolumn and number column into one
    set signcolumn=number
  else
    set signcolumn=yes
  endif

  inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
  else
    inoremap <silent><expr> <c-@> coc#refresh()
  endif

  inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  nmap <silent> [g <Plug>(coc-diagnostic-prev)
	nmap <silent> ]g <Plug>(coc-diagnostic-next)

  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction
  
  autocmd CursorHold * silent call CocActionAsync('highlight')

  nmap <leader>rn <Plug>(coc-rename)
  
  augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json,c,cpp setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

  xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  nmap <leader>ac  <Plug>(coc-codeaction)
  nmap <leader>qf  <Plug>(coc-fix-current)

  if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  endif

  nmap <silent> <C-s> <Plug>(coc-range-select)
  xmap <silent> <C-s> <Plug>(coc-range-select)

  command! -nargs=0 Format :call CocAction('format')
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)

  nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
  nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
  nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
  nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
  nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
  nnoremap <silent> <space>j  :<C-u>CocNext<CR>
  nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
  nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

  imap <C-k> <Plug>(coc-snippets-expand)
  vmap <C-k> <Plug>(coc-snippets-select)
  let g:coc_snippet_next = '<c-k>'
  let g:coc_snippet_prev = '<c-j>'
  imap <C-k> <Plug>(coc-snippets-expand-jump)
  xmap <leader>x  <Plug>(coc-convert-snippet)
'''

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'leico/autodate.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
  let g:cpp_class_scope_highlight = 1
  let g:cpp_class_decl_highlight = 1
  let g:python_highlight_all = 1
  let g:vim_markdown_conceal = 0
  let g:vim_markdown_conceal_code_blocks = 0
'''

[[plugins]]
repo = 'flazz/vim-colorschemes'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'tyrannicaltoucan/vim-deep-space'
hook_add = '''
  syntax enable
  set termguicolors
  set background=dark
  autocmd ColorScheme * highlight MatchParen guibg=Red
  autocmd ColorScheme * highlight Include guifg=#98C379 gui=underline
  autocmd ColorScheme * highlight Comment gui=italic
  autocmd ColorScheme * highligh CursorLine gui=underline guibg=none
  autocmd ColorScheme * highligh CursorLineNr gui=underline guibg=none
  autocmd ColorScheme * highligh ColorColumn guifg=#84B97C
  colorscheme deep-space
  set colorcolumn=80
'''

[[plugins]]
repo = 'Shirk/vim-gas'

[[plugins]]
repo =  'tomtom/tcomment_vim'

[[plugins]]
repo =  'wlangstroth/vim-racket'

[[plugins]]
repo =  'MattesGroeger/vim-bookmarks'

[[plugins]]
repo =  'dhruvasagar/vim-table-mode'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  set updatetime=400
  let g:gitgutter_highlight_lines = 0
'''

[[plugins]]
repo = 'vim-jp/vim-cpp'
hook_add = '''
  highlight ReservedIdentifiers ctermfg=160
'''

[[plugins]]
repo = 'octol/vim-cpp-enhanced-highlight'
hook_add = '''
  let g:cpp_class_scope_highlight = 1
  let g:cpp_class_decl_highlight = 1
  let g:cpp_concepts_highlight = 1
'''

[[plugins]]
repo = 'osyo-manga/vim-cpp-syntax-reserved_identifiers'

[[plugins]]
repo = 'powerline/powerline'

[[plugins]]
repo = 'vim-scripts/DoxygenToolkit.vim'

[[plugins]]
repo = 'mileszs/ack.vim'
hook_add = '''
  let g:ackprg = 'rg --vimgrep'
'''

[[plugins]]
repo = 'pboettch/vim-cmake-syntax'

[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
depends = ['kristijanhusak/defx-icons']
hook_add = '''
  autocmd FileType defx call s:defx_my_settings()
  nnoremap <silent> <C-l> :Defx<CR>
  function! s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> <CR>
    \ defx#is_directory() ?
    \ defx#do_action('open_or_close_tree') :
    \ defx#do_action('drop')
    nnoremap <silent><buffer><expr> <C-j>
    \ defx#is_directory() ?
    \ defx#do_action('open_or_close_tree') :
    \ defx#do_action('drop')
    nnoremap <silent><buffer><expr> c
    \ defx#do_action('copy')
    nnoremap <silent><buffer><expr> m
    \ defx#do_action('move')
    nnoremap <silent><buffer><expr> p
    \ defx#do_action('paste')
    nnoremap <silent><buffer><expr> l
    \ defx#is_directory() ?
    \ defx#do_action('open_or_close_tree') :
    \ defx#do_action('drop')
    nnoremap <silent><buffer><expr> K
    \ defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N
    \ defx#do_action('new_file')
    nnoremap <silent><buffer><expr> C
    \ defx#do_action('toggle_columns',
    \                'mark:indent:icons:filename')
    nnoremap <silent><buffer><expr> S
    \ defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> d
    \ defx#do_action('remove')
    nnoremap <silent><buffer><expr> r
    \ defx#do_action('rename')
    nnoremap <silent><buffer><expr> !
    \ defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x
    \ defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy
    \ defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> .
    \ defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ;
    \ defx#do_action('repeat')
    nnoremap <silent><buffer><expr> u
    \ defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~
    \ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q
    \ defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space>
    \ defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> *
    \ defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j
    \ line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k
    \ line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-g>
    \ defx#do_action('print')
    nnoremap <silent><buffer><expr> cd
    \ defx#do_action('change_vim_cwd')
  endfunction
'''
hook_source ='''
  function! Root(path) abort
    return fnamemodify(a:path, ':t')
  endfunction
  call defx#custom#source('file', {
      \ 'root': 'Root',
      \ })
  call defx#custom#option('_', {
      \ 'winwidth': 40,
      \ 'columns': 'mark:indent:icons:filename',
      \ 'direction': 'topleft',
      \ 'show_ignored_files': 1,
      \ 'split': 'vertical',
      \ 'sort': 'extension:filename',
      \ 'toggle': 1,
      \ 'resume': 1,
      \ })
'''

[[plugins]]
repo = 'rust-lang/rust.vim'
hook_add = '''
let g:rustfmt_autosave = 0
'''
on_ft = ['rust']

[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = 'kristijanhusak/defx-git'

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_source = '''
  nnoremap <C-q> :Files<CR>
'''

[[plugins]]
repo = 'neomutt/neomutt.vim'

[[plugins]]
repo = 'mhinz/neovim-remote'

[[plugins]]
repo = 'rhysd/vim-llvm'

[[plugins]]
repo = 'tversteeg/registers.nvim'

[[plugins]]
repo = 'ap/vim-buftabline'

[[plugins]]
repo = 'habamax/vim-rst'
