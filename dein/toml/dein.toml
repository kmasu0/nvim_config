[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'neoclide/coc.nvim'
merged = 0
rev = 'release'
hook_add = '''
  set hidden
  set nobackup
  set nowritebackup
  set cmdheight=2
  set updatetime=200
  set shortmess+=c
  set tagfunc=CocTagFunc

  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

	function! s:check_back_space() abort
	  let col = col('.') - 1
	  return !col || getline('.')[col - 1]  =~# '\s'
	endfunction<Paste>

	inoremap <silent><expr> <c-space> coc#refresh()
	inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

  nmap <silent> [c <Plug>(coc-diagnostic-prev)
	nmap <silent> ]c <Plug>(coc-diagnostic-next)

  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  nnoremap <silent> K :call <SID>show_documentation()<CR>

	function! s:show_documentation()
	  if (index(['vim','help'], &filetype) >= 0)
	    execute 'h '.expand('<cword>')
	  else
	  	call CocAction('doHover')
		endif
	endfunction

	autocmd CursorHold * silent call CocActionAsync('highlight')
	nmap <leader>rn <Plug>(coc-rename)

	augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json,c,cpp setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

	xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  " Remap for do codeAction of current line<Plug>CocRefresh"
	nmap <leader>ac  <Plug>(coc-codeaction)
  " Fix autofix problem of current line
  nmap <leader>qf  <Plug>(coc-fix-current)
	" Use `:Format` to format current buffer
  command! -nargs=0 Format :call CocAction('format')
  " Use `:Fold` to fold current buffer
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)

	let g:lightline = {
  	\ 'colorscheme': 'neodark',
  	\ 'active': {
  	\   'left': [ [ 'mode', 'paste'  ],
  	\             [ 'cocstatus', 'readonly', 'filename', 'modified'  ] ]
  	\ },
  	\ 'component_function': {
  	\   'cocstatus': 'coc#status'
  	\ },
		\ }

	nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
	nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
	nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
	nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
	nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
	nnoremap <silent> <space>j  :<C-u>CocNext<CR>
	nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
	nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_event = 'InsertCharPre'
on_ft = ['snippet']
hook_add = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''
depends = ['vim-snippets', 'neosnippet-snippets']

[[plugins]]
repo = 'leico/autodate.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
	let g:neoterm_autoinsert = 1
  let g:neoterm_default_mod = 'rightbelow'
	let g:neoterm_autoscroll = 1
'''

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
  let g:cpp_class_scope_highlight = 1
  let g:cpp_class_decl_highlight = 1
  let g:python_highlight_all = 1
  let g:vim_markdown_conceal = 0
  let g:vim_markdown_conceal_code_blocks = 0
'''

[[plugins]]
repo = 'flazz/vim-colorschemes'
depends = [ 'KeitaNakamura/neodark.vim' ]

[[plugins]]
repo = 'KeitaNakamura/neodark.vim'
hook_add = '''
  syntax enable
  set termguicolors
  let g:neodark#terminal_transparent = 1
  set background=light
  colorscheme gruvbox
  set background=light
  let g:gruvbox_material_background = 'soft'
  autocmd ColorScheme * highlight MatchParen guibg=Red
  autocmd ColorScheme * highlight Include guifg=#98C379 gui=underline
  autocmd ColorScheme * highlight Comment gui=italic
  autocmd ColorScheme * highligh CursorLine gui=underline guibg=none
  autocmd ColorScheme * highligh CursorLineNr gui=underline guibg=none
  autocmd ColorScheme * highligh ColorColumn guifg=#84B97C
  set colorcolumn=80
'''

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'Shirk/vim-gas'

[[plugins]]
repo =  'tomtom/tcomment_vim'

[[plugins]]
repo =  'vim-scripts/taglist.vim'

[[plugins]]
repo =  'wlangstroth/vim-racket'

[[plugins]]
repo =  'MattesGroeger/vim-bookmarks'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_post_source = '''
let g:quickrun_config = get(g:, 'quickrun_config', {})
" let g:quickrun_config = {
let g:quickrun_config._ = {
      \ 'runner/vimproc/updatetime' : 60,
      \ 'outputter' : 'error',
      \ 'outputter/error/success' : 'buffer',
      \ 'outputter/error/error'   : 'quickfix',
      \ 'outputter/buffer/split'  : ':rightbelow 8sp',
      \ 'outputter/buffer/close_on_empty' : 1,
      \ }
au FileType qf nnoremap <silent><buffer>q :quit<CR>
'''

[[plugins]]
repo =  'dhruvasagar/vim-table-mode'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  set updatetime=400
  let g:gitgutter_highlight_lines = 0
'''

[[plugins]]
repo = 'vim-jp/vim-cpp'
hook_add = '''
  highlight ReservedIdentifiers ctermfg=160
'''

[[plugins]]
repo = 'octol/vim-cpp-enhanced-highlight'
hook_add = '''
  let g:cpp_class_scope_highlight = 1
  let g:cpp_class_decl_highlight = 1
  let g:cpp_concepts_highlight = 1
'''

[[plugins]]
repo = 'osyo-manga/vim-cpp-syntax-reserved_identifiers'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'Lokaltog/vim-powerline'

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes', 'Lokaltog/vim-powerline', 'airblade/vim-gitgutter']
hook_add = '''
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#whitespace#enabled = 1
  let g:airline#extensions#readonly#enabled = 1
  let g:airline_powerline_fonts = 1
  set hidden
  nnoremap <C-j> :bnext<CR>
  nnoremap <C-k> :bprevious<CR>
  let g:airline#extensions#tabline#buffer_idx_mode = 1
  let g:airline#extensions#hunks#enabled = 1
  let g:airline_theme = 'neodark'
'''

[[plugins]]
repo = 'vim-scripts/DoxygenToolkit.vim'

[[plugins]]
repo = 'mileszs/ack.vim'
hook_add = '''
  let g:ackprg = 'rg --vimgrep'
'''

[[plugins]]
repo = 'pboettch/vim-cmake-syntax'

[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
depend = ['defx-icons', 'defx-git']
hook_add = '''
  nnoremap <silent> <C-l> :Defx -split=vertical -winwidth=35 -direction=topleft -buffer-name=tab`tabpagenr()`<CR>
  autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> <CR>
    \ defx#is_directory() ?
    \ defx#do_action('open_or_close_tree') :
    \ defx#do_action('drop')
    nnoremap <silent><buffer><expr> c
    \ defx#do_action('copy')
    nnoremap <silent><buffer><expr> m
    \ defx#do_action('move')
    nnoremap <silent><buffer><expr> p
    \ defx#do_action('paste')
    nnoremap <silent><buffer><expr> l
    \ defx#do_action('open')
    nnoremap <silent><buffer><expr> K
    \ defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N
    \ defx#do_action('new_file')
    nnoremap <silent><buffer><expr> C
    \ defx#do_action('toggle_columns',
    \                'git:mark:indent:icon:filename:type:size:time')
    nnoremap <silent><buffer><expr> S
    \ defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> d
    \ defx#do_action('remove')
    nnoremap <silent><buffer><expr> r
    \ defx#do_action('rename')
    nnoremap <silent><buffer><expr> !
    \ defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x
    \ defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy
    \ defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> .
    \ defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ;
    \ defx#do_action('repeat')
    nnoremap <silent><buffer><expr> u
    \ defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~
    \ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q
    \ defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space>
    \ defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> *
    \ defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j
    \ line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k
    \ line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l>
    \ defx#do_action('redraw')
    nnoremap <silent><buffer><expr> <C-g>
    \ defx#do_action('print')
    nnoremap <silent><buffer><expr> cd
    \ defx#do_action('change_vim_cwd')
  endfunction
'''
hook_source ='''
  function! Root(path) abort
    return fnamemodify(a:path, ':t')
  endfunction
  call defx#custom#source('file', {
      \ 'root': 'Root',
      \ })
  call defx#custom#option('_', {
      \ 'columns': 'indent:git:icons:filename',
      \ 'show_ignored_files': 1,
      \ })
'''
#
[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = 'kristijanhusak/defx-git'

# [plugins.ftplugin]
# defx = '''
# '''

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_source = '''
  nnoremap <C-q> :Files<CR>
'''
