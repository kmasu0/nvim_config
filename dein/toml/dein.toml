[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'neoclide/coc.nvim'
build = './install.sh nightly'
hook_add = '''
  set hidden
  set nobackup
  set nowritebackup
  set cmdheight=2
  set updatetime=300
  set shortmess+=c

  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

	function! s:check_back_space() abort
	  let col = col('.') - 1
	  return !col || getline('.')[col - 1]  =~# '\s'
	endfunction<Paste>
	inoremap <silent><expr> <c-space> coc#refresh()
	inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
  nmap <silent> [c <Plug>(coc-diagnostic-prev)]
	nmap <silent> ]c <Plug>(coc-diagnostic-next)
	nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)
  nnoremap <silent> K :call <SID>show_documentation()<CR>
	function! s:show_documentation()
	  if (index(['vim','help'], &filetype) >= 0)
	    execute 'h '.expand('<cword>')
	  else
	  	call CocAction('doHover')
		endif
	endfunction
	autocmd CursorHold * silent call CocActionAsync('highlight')
	nmap <leader>rn <Plug>(coc-rename)
	augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json,c,cpp setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end
	xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  " Remap for do codeAction of current line<Plug>CocRefresh"
	nmap <leader>ac  <Plug>(coc-codeaction)
  " Fix autofix problem of current line
  nmap <leader>qf  <Plug>(coc-fix-current)
	" Use `:Format` to format current buffer
  command! -nargs=0 Format :call CocAction('format')
  " Use `:Fold` to fold current buffer
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)
	let g:lightline = {
  	\ 'colorscheme': 'neodark',
  	\ 'active': {
  	\   'left': [ [ 'mode', 'paste'  ],
  	\             [ 'cocstatus', 'readonly', 'filename', 'modified'  ] ]
  	\ },
  	\ 'component_function': {
  	\   'cocstatus': 'coc#status'
  	\ },
		\ }
	nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
	nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
	nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
	nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
	nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
	nnoremap <silent> <space>j  :<C-u>CocNext<CR>
	nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
	nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_event = 'InsertCharPre'
on_ft = ['snippet']
hook_source = '''
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
'''
depends = ['neosnippet-snippets']

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_ft = ['c', 'cpp', 'cc', 'h', 'hh', 'hpp', 'C' 'H']
depends = ['neoclide/coc.nvim']

[[plugins]]
repo = 'jsfaint/coc-neoinclude'
on_ft = ['c', 'cpp', 'cc', 'h', 'hh', 'hpp', 'C' 'H']
depends = ['neoclide/coc.nvim', 'Shougo/neoinclude.vim']

[[plugins]]
repo = 'leico/autodate.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
let g:neoterm_autoscroll=1
'''

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
let g:cpp_class_scope_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:python_highlight_all = 1
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
'''

[[plugins]]
repo = 'flazz/vim-colorschemes'
depends = [ 'KeitaNakamura/neodark.vim' ]

[[plugins]]
repo = 'KeitaNakamura/neodark.vim'
hook_add = '''
let g:neodark#terminal_transparent = 1
colorscheme neodark
'''

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'Shirk/vim-gas'

[[plugins]]
repo =  'tomtom/tcomment_vim'

[[plugins]]
repo =  'vim-scripts/taglist.vim'

[[plugins]]
repo =  'wlangstroth/vim-racket'

[[plugins]]
repo =  'MattesGroeger/vim-bookmarks'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_post_source = '''
let g:quickrun_config = get(g:, 'quickrun_config', {})
" let g:quickrun_config = {
let g:quickrun_config._ = {
      \ 'runner/vimproc/updatetime' : 60,
      \ 'outputter' : 'error',
      \ 'outputter/error/success' : 'buffer',
      \ 'outputter/error/error'   : 'quickfix',
      \ 'outputter/buffer/split'  : ':rightbelow 8sp',
      \ 'outputter/buffer/close_on_empty' : 1,
      \ }
au FileType qf nnoremap <silent><buffer>q :quit<CR>
'''

[[plugins]]
repo =  'dhruvasagar/vim-table-mode'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
set updatetime=400
let g:gitgutter_highlight_lines = 0
'''

[[plugins]]
repo = 'vim-jp/vim-cpp'
hook_add = '''
highlight ReservedIdentifiers ctermfg=160
'''

# [[plugins]]
# repo = 'octol/vim-cpp-enhanced-highlight'
# hook_add = '''
# let g:cpp_class_scope_highlight = 1
# let g:cpp_class_decl_highlight = 1
# let g:cpp_concepts_highlight = 1
# '''

[[plugins]]
repo = 'osyo-manga/vim-cpp-syntax-reserved_identifiers'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'chriskempson/base16-vim'

[[plugins]]
repo = 'chriskempson/base16'
hook_add = '''
syntax enable
set termguicolors
autocmd ColorScheme * highlight MatchParen guibg=Red
autocmd ColorScheme * highlight Include guifg=#98C379 gui=underline
autocmd ColorScheme * highlight Comment gui=italic
autocmd ColorScheme * highligh clear CursorLine
'''
# highlight clear CursorLine
depend = ['chriskempson/base16-vim']

[[plugins]]
repo = 'Lokaltog/vim-powerline'

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes', 'Lokaltog/vim-powerline', 'airblade/vim-gitgutter']
hook_add = '''
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#readonly#enabled = 1
let g:airline_powerline_fonts = 1
set hidden
nmap <C-j> :bnext<CR>
nmap <C-k> :bprevious<CR>
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#hunks#enabled = 1
let g:airline_theme = 'neodark'
'''

[[plugins]]
repo = 'vim-scripts/DoxygenToolkit.vim'

[[plugins]]
repo = 'mileszs/ack.vim'
hook_add = '''
let g:ackprg = 'ag --vimgrep'
'''

[[plugins]]
repo = 'pboettch/vim-cmake-syntax'
